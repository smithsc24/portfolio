"use strict";(self.webpackChunkbasic_portfolio_site=self.webpackChunkbasic_portfolio_site||[]).push([[1061],{31061:(e,t,o)=>{o.r(t),o.d(t,{default:()=>R});var r=o(70273),i=o(57998),l=o(25943),s=(o(95026),o(68313)),n=o(92976),a=o(89524),y=o(67519),p=(o(27052),o(11434),o(11215),o(35097)),u=o(55292),d=o(76607),h=o(38609),c=o(97719),v=o(67846),S=o(94452),m=o(52851),f=o(8065),g=o(89136),_=o(20005),b=o(93846),M=o(67553),C=o(62652),A=o(69806),Z=o(68597);const k=["atom","xml"],w={base:b.A,key:"type",typeMap:{"simple-line":M.A},errorContext:"symbol"},G={base:b.A,key:"type",typeMap:{"picture-marker":C.A,"simple-marker":A.A},errorContext:"symbol"},P={base:b.A,key:"type",typeMap:{"simple-fill":Z.A},errorContext:"symbol"};let x=class extends((0,v.dM)((0,f.J)((0,S.q)((0,m.A)((0,g.j)((0,s.P)(c.A))))))){constructor(){super(...arguments),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const o=e.layerDefinition.drawingInfo.renderer.symbol;o&&"esriSFS"===o.type&&(null===(t=o.outline)||void 0===t?void 0:t.style.includes("esriSFS"))&&(o.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,a.e7)(this.url,k)||"GeoRSS":e}set title(e){this._set("title",e)}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(n.QP).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var t;const o=this.spatialReference,{data:r}=await(0,l.A)(i.A.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,h.oT)(o)?void 0:null!==(t=o.wkid)&&void 0!==t?t:JSON.stringify(o)},signal:e});return r}_hasGeometry(e){var t,o;return null!==(t=null===(o=this.featureCollections)||void 0===o?void 0:o.some((t=>{var o,r;return(null===(o=t.featureSet)||void 0===o?void 0:o.geometryType)===e&&(null===(r=t.featureSet.features)||void 0===r?void 0:r.length)>0})))&&void 0!==t&&t}};(0,r._)([(0,y.MZ)()],x.prototype,"description",void 0),(0,r._)([(0,y.MZ)()],x.prototype,"featureCollections",void 0),(0,r._)([(0,p.w)("service","featureCollections",["featureCollection.layers"])],x.prototype,"readFeatureCollections",null),(0,r._)([(0,y.MZ)({type:d.A,json:{name:"lookAtExtent"}})],x.prototype,"fullExtent",void 0),(0,r._)([(0,y.MZ)(_.id)],x.prototype,"id",void 0),(0,r._)([(0,y.MZ)(_.fV)],x.prototype,"legendEnabled",void 0),(0,r._)([(0,y.MZ)({types:w,json:{write:!0}})],x.prototype,"lineSymbol",void 0),(0,r._)([(0,y.MZ)({type:["show","hide"]})],x.prototype,"listMode",void 0),(0,r._)([(0,y.MZ)({types:G,json:{write:!0}})],x.prototype,"pointSymbol",void 0),(0,r._)([(0,y.MZ)({types:P,json:{write:!0}})],x.prototype,"polygonSymbol",void 0),(0,r._)([(0,y.MZ)({type:["GeoRSS"]})],x.prototype,"operationalLayerType",void 0),(0,r._)([(0,y.MZ)(_.OZ)],x.prototype,"url",void 0),(0,r._)([(0,y.MZ)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],x.prototype,"title",null),(0,r._)([(0,y.MZ)({readOnly:!0,json:{read:!1},value:"geo-rss"})],x.prototype,"type",void 0),x=(0,r._)([(0,u.$)("esri.layers.GeoRSSLayer")],x);const R=x}}]);
//# sourceMappingURL=1061.74b2a400.chunk.js.map